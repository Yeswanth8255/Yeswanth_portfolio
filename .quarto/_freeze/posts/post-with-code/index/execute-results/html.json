{
  "hash": "f4c3874e1ddf917364ce024f56fb0383",
  "result": {
    "markdown": "---\ntitle: \"Linear regression analysis\"\nauthor: \"Yeswanth Chitirala\"\ndate: \"2023-12-14\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n\n## Introduction\n\nThis is a post with executable code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required libraries\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(123)\n\n# Generate a random dataframe\nn <- 100\nrandom_df <- data.frame(\n  X1 = rnorm(n),\n  X2 = rnorm(n),\n  X3 = rnorm(n)\n)\n\n# Add the Y column based on X1, X2, and X3\nrandom_df$Y <- 2 * random_df$X1 - 3 * random_df$X2 + 0.5 * random_df$X3 + rnorm(n)\n\n# Display the first few rows of the dataframe\nprint(\"Random Dataframe:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Random Dataframe:\"\n```\n:::\n\n```{.r .cell-code}\nprint(head(random_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           X1          X2         X3          Y\n1 -0.56047565 -0.71040656  2.1988103  1.3944314\n2 -0.23017749  0.25688371  1.3124130 -1.3274886\n3  1.55870831 -0.24669188 -0.2651451  2.7863810\n4  0.07050839 -0.34754260  0.5431941  0.4027283\n5  0.12928774 -0.95161857 -0.4143399  2.4691017\n6  1.71506499 -0.04502772 -0.4762469  3.6582689\n```\n:::\n:::\n\n\n# Descriptive statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform Descriptive Statistics\nprint(\"Descriptive Statistics:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Descriptive Statistics:\"\n```\n:::\n\n```{.r .cell-code}\nprint(summary(random_df))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       X1                 X2                X3                 Y           \n Min.   :-2.30917   Min.   :-2.0532   Min.   :-1.75653   Min.   :-10.0855  \n 1st Qu.:-0.49385   1st Qu.:-0.8011   1st Qu.:-0.53131   1st Qu.: -1.5122  \n Median : 0.06176   Median :-0.2258   Median : 0.03591   Median :  0.7392  \n Mean   : 0.09041   Mean   :-0.1075   Mean   : 0.12047   Mean   :  0.5275  \n 3rd Qu.: 0.69182   3rd Qu.: 0.4678   3rd Qu.: 0.76363   3rd Qu.:  2.7085  \n Max.   : 2.18733   Max.   : 3.2410   Max.   : 2.29308   Max.   :  8.3693  \n```\n:::\n:::\n\n\n# Data visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exploratory Data Analysis (EDA)\n# Scatterplot matrix\nprint(\"Scatterplot Matrix:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Scatterplot Matrix:\"\n```\n:::\n\n```{.r .cell-code}\npairs(random_df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Correlation matrix\nprint(\"Correlation Matrix:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Correlation Matrix:\"\n```\n:::\n\n```{.r .cell-code}\ncor_matrix <- cor(random_df)\nprint(cor_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            X1          X2          X3           Y\nX1  1.00000000 -0.04953215 -0.12917601  0.52062045\nX2 -0.04953215  1.00000000  0.03057903 -0.81952788\nX3 -0.12917601  0.03057903  1.00000000  0.02901921\nY   0.52062045 -0.81952788  0.02901921  1.00000000\n```\n:::\n\n```{.r .cell-code}\n# 3D Scatterplot\nprint(\"3D Scatterplot:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3D Scatterplot:\"\n```\n:::\n\n```{.r .cell-code}\nscatterplot3d::scatterplot3d(\n  random_df$X1, random_df$X2, random_df$X3,\n  color = \"blue\",\n  main = \"3D Scatterplot\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Density Plots for each variable\nprint(\"Density Plots:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Density Plots:\"\n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nfor (i in 1:3) {\n  density_plot <- ggplot(random_df, aes(x = random_df[, i])) +\n    geom_density(fill = \"blue\", color = \"black\") +\n    labs(title = paste(\"Density Plot for\", names(random_df)[i]))\n  print(density_plot)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-5.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1)) \n```\n:::\n\n\n## Linear regression analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Linear Regression Machine Learning\n# Split data into training and testing sets\nset.seed(456)\ntrain_index <- createDataPartition(random_df$Y, p = 0.8, list = FALSE)\ntrain_data <- random_df[train_index, ]\ntest_data <- random_df[-train_index, ]\n\n# Fit a linear regression model\nlm_model <- lm(Y ~ ., data = train_data)\n\n# Display the summary of the linear regression model\nprint(\"Linear Regression Model Summary:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Linear Regression Model Summary:\"\n```\n:::\n\n```{.r .cell-code}\nprint(summary(lm_model))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = Y ~ ., data = train_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.34439 -0.69371  0.03461  0.62794  2.66797 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.07543    0.12207  -0.618  0.53847    \nX1           2.07202    0.12921  16.036  < 2e-16 ***\nX2          -2.87535    0.12951 -22.202  < 2e-16 ***\nX3           0.36562    0.12312   2.970  0.00399 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.06 on 76 degrees of freedom\nMultiple R-squared:  0.9162,\tAdjusted R-squared:  0.9129 \nF-statistic: 277.1 on 3 and 76 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\n# Make predictions on the test set\npredictions <- predict(lm_model, newdata = test_data)\n\n# Evaluate the model\nprint(\"Model Evaluation:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Model Evaluation:\"\n```\n:::\n\n```{.r .cell-code}\n# Calculate various forms of accuracy metrics\nrmse <- sqrt(mean((predictions - test_data$Y)^2))\nmae <- mean(abs(predictions - test_data$Y))\nr_squared <- cor(predictions, test_data$Y)^2\n\nprint(paste(\"Root Mean Squared Error (RMSE):\", round(rmse, 3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Root Mean Squared Error (RMSE): 1.088\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Mean Absolute Error (MAE):\", round(mae, 3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mean Absolute Error (MAE): 0.892\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"R-squared:\", round(r_squared, 3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R-squared: 0.91\"\n```\n:::\n\n```{.r .cell-code}\n# Additional Accuracy Metrics\nprint(\"Additional Accuracy Metrics:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Additional Accuracy Metrics:\"\n```\n:::\n\n```{.r .cell-code}\n# Mean Squared Error (MSE)\nmse <- mean((predictions - test_data$Y)^2)\n# Mean Absolute Percentage Error (MAPE)\nmape <- mean(abs((test_data$Y - predictions) / test_data$Y)) * 100\n\nprint(paste(\"Mean Squared Error (MSE):\", round(mse, 3)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mean Squared Error (MSE): 1.184\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Mean Absolute Percentage Error (MAPE):\", round(mape, 3), \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Mean Absolute Percentage Error (MAPE): 66.624 %\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Interactive Visualization using plotly\nplot_ly(data = test_data, x = ~test_data$Y, y = ~predictions, type = 'scatter', mode = 'markers') %>%\n  add_trace(x = c(min(test_data$Y), max(test_data$Y)), y = c(min(test_data$Y), max(test_data$Y)), mode = 'lines', line = list(color = 'red', dash = 'dash')) %>%\n  layout(title = \"Interactive Predictions vs. Actual Values\", xaxis = list(title = \"Actual Values\"), yaxis = list(title = \"Predictions\"))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-27bb28bb28d4241788bc\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-27bb28bb28d4241788bc\">{\"x\":{\"visdat\":{\"190c61c21843\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"190c61c21843\",\"attrs\":{\"190c61c21843\":{\"x\":{},\"y\":{},\"mode\":\"markers\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"},\"190c61c21843.1\":{\"x\":[-10.085497997389631,4.6047249380860489],\"y\":[-10.085497997389631,4.6047249380860489],\"mode\":\"lines\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"line\":{\"color\":\"red\",\"dash\":\"dash\"},\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Interactive Predictions vs. Actual Values\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Actual Values\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Predictions\"},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[2.7863810317302984,-3.5182039131171723,0.35241943155523159,2.3958369869959362,3.9335755321468913,0.32510859272005554,-0.70391642585543823,1.0522175289898175,1.0786639307846015,4.6047249380860489,3.6283372358129711,-1.0294377775272536,2.568884666132917,-5.2059298138807328,-2.8647133474626911,3.4113946743528083,-10.085497997389631,1.0711892448197746,-2.4605164279366312,0.3120663096995856],\"y\":[3.7666245129132592,-3.0834982985783723,0.49097175677249527,1.4199534026749401,2.4231916814490848,-0.59064251332736706,-1.6738561135754566,1.7391661501025104,0.064059335977358689,2.3701009248901026,3.2559286137747709,-1.9529021976982981,2.4374073167901296,-2.6694917365191899,-2.5062550200079414,2.8747884485946575,-11.029686815100527,-0.25919631006242294,-2.6399467578345046,0.9868898184651953],\"mode\":\"markers\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[-10.085497997389631,4.6047249380860489],\"y\":[-10.085497997389631,4.6047249380860489],\"mode\":\"lines\",\"type\":\"scatter\",\"line\":{\"color\":\"red\",\"dash\":\"dash\"},\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n```{.r .cell-code}\n# Residual Analysis\nprint(\"Residual Analysis:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Residual Analysis:\"\n```\n:::\n\n```{.r .cell-code}\nresiduals <- residuals(lm_model)\nqqnorm(residuals, main = \"Normal Q-Q Plot of Residuals\")\nqqline(residuals)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(residuals, main = \"Residuals vs. Fitted Values\", xlab = \"Fitted Values\", ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# Visualize the predictions vs. actual values using ggplot2 (with residuals)\nresidual_data <- data.frame(Actual = test_data$Y, Predicted = predictions, Residual = residuals)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in data.frame(Actual = test_data$Y, Predicted = predictions, Residual =\nresiduals): row names were found from a short variable and have been discarded\n```\n:::\n\n```{.r .cell-code}\nggplot(residual_data) +\n  geom_point(aes(x = Actual, y = Predicted), color = \"blue\") +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"red\") +\n  labs(title = \"Predictions vs. Actual Values with Residuals\", x = \"Actual Values\", y = \"Predictions\") +\n  geom_segment(aes(x = Actual, y = Predicted, xend = Actual, yend = Residual), color = \"gray\", alpha = 0.5) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Interactive 3D Visualization using plotly\nprint(\"Interactive 3D Visualization:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Interactive 3D Visualization:\"\n```\n:::\n\n```{.r .cell-code}\nplot_ly(\n  data = random_df,\n  x = ~X1, y = ~X2, z = ~X3,\n  type = 'scatter3d',\n  mode = 'markers',\n  marker = list(size = 5, color = 'blue')\n) %>%\n  layout(title = \"Interactive 3D Scatterplot\", scene = list(xaxis = list(title = \"X1\"), yaxis = list(title = \"X2\"), zaxis = list(title = \"X3\")))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-b4a7f79aaf8db34332e5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b4a7f79aaf8db34332e5\">{\"x\":{\"visdat\":{\"190c3d3a20d5\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"190c3d3a20d5\",\"attrs\":{\"190c3d3a20d5\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"marker\":{\"size\":5,\"color\":\"blue\"},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Interactive 3D Scatterplot\",\"scene\":{\"xaxis\":{\"title\":\"X1\"},\"yaxis\":{\"title\":\"X2\"},\"zaxis\":{\"title\":\"X3\"}},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[-0.5604756465522126,-0.23017748948327996,1.558708314149124,0.070508391424576003,0.12928773516094624,1.715064986883281,0.4609162059892023,-1.265061234606534,-0.68685285189352607,-0.44566197009995806,1.2240817974394615,0.35981382705736381,0.40077145059405217,0.11068271594511971,-0.55584113475407493,1.7869131368030782,0.49785047822923939,-1.9666171566296382,0.70135590156368555,-0.47279140772793404,-1.0678237059868452,-0.21797491465829513,-1.0260044483072397,-0.72889122929114025,-0.62503926784925667,-1.6866933107424134,0.83778704449452468,0.15337311783651522,-1.1381369370119476,1.2538149210699268,0.42646422147681357,-0.29507148299227115,0.89512566104502223,0.87813348753304221,0.82158108163748711,0.688640254100091,0.55391765353758882,-0.061911710576721679,-0.30596266373991676,-0.38047100101238268,-0.6947069789205127,-0.20791727801959878,-1.2653963515682645,2.1689559653385126,1.2079619983049905,-1.1231085832033492,-0.40288483529907598,-0.46665535362321886,0.77996511833631788,-0.083369066471829276,0.2533185139947548,-0.028546755348703018,-0.04287045729131609,1.3686022840144576,-0.22577098565926762,1.5164706044295397,-1.5487528042302212,0.58461374963606916,0.12385424384461378,0.21594156874397272,0.37963948275988207,-0.50232345310930226,-0.3332073836694201,-1.0185753831070887,-1.0717912264755778,0.30352864140425806,0.44820977862942618,0.053004226730504145,0.92226746787973757,2.0500846856271444,-0.4910311660565353,-2.3091688756408124,1.0057385244622565,-0.70920076258239262,-0.688008616467358,1.0255713696966988,-0.28477300705100889,-1.2207177122545356,0.1813034797491502,-0.13889136243904462,0.005764185899886933,0.3852804011263305,-0.37066003179240936,0.64437654851883297,-0.22048656181875062,0.33178196391569692,1.0968390131493477,0.43518149083380286,-0.32593158553122675,1.1488076184510938,0.99350385596211943,0.54839695950806999,0.23873173511144119,-0.62790607603937143,1.3606524485300076,-0.60025958714712691,2.1873329930165766,1.5326106261851893,-0.23570035910047687,-1.0264209003067808],\"y\":[-0.710406563699301,0.25688370915652953,-0.24669187846237361,-0.34754259939773319,-0.9516185672650157,-0.045027724808920269,-0.78490446945707582,-1.6679419365881367,-0.38022652028776244,0.91899660906076597,-0.57534696260839191,0.60796432222503338,-1.617882708289164,-0.055561965524539438,0.51940720394346229,0.3011533621667144,0.10567619414894333,-0.64070600830537638,-0.84970434603358225,-1.0241287906049132,0.11764659710012587,-0.94747461418480217,-0.49055744370066834,-0.25609219219824725,1.8438620052322074,-0.65194990169545852,0.23538657228485693,0.077960849563710771,-0.96185663413012856,-0.071308086123598666,1.4445508584233488,0.45150405307921465,0.04123292199293993,-0.42249683233962482,-2.0532472215405155,1.1313372134141755,-1.460640070924822,0.73994751087733446,1.9091035692174834,-1.4438931609717993,0.70178433537471085,-0.26219748940246801,-1.5721441591454877,-1.5146676537817514,-1.6015361735745934,-0.53090652217030299,-1.4617555849958999,0.68791677297582754,2.1001089405256717,-1.2870304760351789,0.78773884747517808,0.7690422410009099,0.33220257895011768,-1.0083766082770078,-0.11945260663065868,-0.28039533517024667,0.56298953322047984,-0.37243875610382904,0.97697338668562073,-0.37458085776701383,1.0527114655793319,-1.0491770066660657,-1.2601552447581124,3.2410399349424046,-0.41685758816043178,0.29822759154071532,0.63656967403384868,-0.48378062570874358,0.51686204431360905,0.36896452738508601,-0.21538050764169339,0.065293033525315264,-0.034067253738463997,2.1284518990161811,-0.74133609627282837,-1.0959962670746639,0.037788399171078818,0.31048074944313703,0.43652347891018295,-0.45836533271110569,-1.063326133971191,1.2631851760894901,-0.34965038795355474,-0.86551286265337402,-0.23627956894109653,-0.19717589434855221,1.1099202897136404,0.084737292197196459,0.75405378518452149,-0.49929201717226079,0.21444530958160127,-0.3246859114908347,0.094583528173571421,-0.89536335797754163,-1.3108015333279719,1.9972133847479665,0.60070882367241762,-1.251271361624944,-0.61116591668042086,-1.1854800845973104],\"z\":[2.1988103488837196,1.3124129764335104,-0.26514505669635297,0.54319405923208952,-0.4143399479188597,-0.4762468946155784,-0.78860283785024254,-0.59461726745951105,1.6509074673366901,-0.054028125085440498,0.11924523642758414,0.24368742959909201,1.2324758784853378,-0.51606383094478026,-0.99250715039203741,1.6756969324031898,-0.44116321690528554,-0.7230659699398736,-1.2362731188832929,-1.2847157223177965,-0.57397347929798692,0.61798581716652856,1.1098481389297183,0.70758835383558805,-0.36365729709525257,0.059749937384600695,-0.70459646368007001,-0.71721816157401019,0.88465049897692005,-1.0155925786035442,1.9552939654924639,-0.090319593965851611,0.21453882662921628,-0.73852770473957341,-0.57438868976326973,-1.3170161323052418,-0.18292538837272732,0.41898240492446387,0.32430434416137999,-0.78153648705475143,-0.78862197085400154,-0.50219871834286078,1.4960606698463506,-1.137303620665745,-0.17905159438019844,1.9023618216789271,-0.1009748853288084,-1.3598407038213938,-0.66476943527406218,0.48545997890487813,-0.37560287166977346,-0.56187636354978299,-0.34391723412845926,0.090496647139221176,1.5985087711458259,-0.088565112138883975,1.0807994961515173,0.6307541156505666,-0.11363989550614068,-1.5329020028905982,-0.52111731755252011,-0.48987045313847427,0.047154432761527233,1.3001986776668206,2.2930789738310939,1.5475810589837693,-0.13315096432894447,-1.7565273955576375,-0.38877986407174348,0.089207223073294539,0.84501300406743596,0.96252796848427102,0.68430942941646455,-1.3952743497994675,0.84964304563335513,-0.44655721642722224,0.17480270016125568,0.074551177173734565,0.42816676497050549,0.024674982826139939,-1.6674750975856629,0.73649596477344215,0.3860265683496758,-0.26565162527822234,0.11814451104668068,0.13403864536846335,0.2210194685610021,1.640846165977486,-0.21905037893347584,0.16806538388465753,1.168383873069093,1.0541810233769191,1.1452631103803574,-0.57746800105955676,2.0024827302928294,0.066700870930182968,1.8668518447068625,-1.3509026860307116,0.020983586354237482,1.2499145709692157],\"mode\":\"markers\",\"marker\":{\"color\":\"blue\",\"size\":5,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter3d\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n\n```{.r .cell-code}\n# Pairwise correlation heatmap\nprint(\"Pairwise Correlation Heatmap:\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Pairwise Correlation Heatmap:\"\n```\n:::\n\n```{.r .cell-code}\nheatmap(cor_matrix, col = colorRampPalette(c(\"blue\", \"white\", \"red\"))(50), symm = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-6.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nThe linear regression model exhibits strong performance as indicated by various metrics. The model captures a substantial portion of the variance in the data, with an R-squared value of 0.91, suggesting that approximately 91% of the variability in the response variable is explained by the predictors. The coefficients of the predictors (X1, X2, and X3) are statistically significant, and their estimated values align with the expected relationships. In terms of accuracy metrics, the model demonstrates a Root Mean Squared Error (RMSE) of 1.088, implying that, on average, predictions deviate by approximately 1.088 units from the actual values. The Mean Absolute Error (MAE) is 0.892, representing the average absolute difference between predicted and actual values. Additionally, the Mean Squared Error (MSE) is 1.184, providing another perspective on the model's predictive accuracy. It's noteworthy that the Residual Standard Error is 1.06, and the F-statistic is 277.1 with a very low p-value, indicating the overall significance of the model. These collectively suggest that the model fits the data well, and its predictions align closely with the observed values.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/plotly-binding-4.10.3/plotly.js\"></script>\r\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}